[
    {
        "id": "5c339712.6b265",
        "type": "link in",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [],
        "x": 375,
        "y": 260,
        "wires": [
            [
                "23a2ab72.c4718c"
            ]
        ]
    },
    {
        "id": "23a2ab72.c4718c",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Parse TLV output",
        "func": "function pad(b) {\n  const h = b.toString(16);\n  return (h + \"\").length < 2 ? \"0\" + h : h;\n}\n\nfunction parse_wifi_legacy(devEui, bytes) {\n    const mgs_query = {\n        \"deveui\":devEui.match( /.{1,2}/g ).join( '-' ),\n        \"uplink\":{\n            \"msgtype\":\"wifi\",\n            \"payload\": `01${bytes}`,\n        }\n    };\n\n    bytes = Buffer.from(bytes, \"hex\");\n    var addresses = [];\n    for (var i = 0; i < bytes.length; i += 7) {\n        var rssi_raw = bytes[i + 0];\n        var bssid_slice = bytes.slice(i + 1, i + 7);\n        var bssid = [];\n        bssid_slice.forEach(byte => {\n            bssid.push(pad(byte));\n        });\n        addresses.push({\n            \"macAddress\": bssid.join(\":\"),\n            \"signalStrength\":  (rssi_raw > 127) ? rssi_raw - 256 : rssi_raw,\n        });\n    }\n    \n    const lorawan = [{\n        \"gatewayId\": \"fake\",\n        \"antennaId\": 0,\n        \"rssi\": 0,\n        \"snr\":0,\n        \"antennaLocation\": {\n            \"latitude\": 0.0,\n            \"longitude\": 0.0,\n            \"altitude\": 0.0\n        }\n    }];\n    \n    var gls_query = {\n       \"lorawan\": lorawan,\n       \"wifiAccessPoints\": addresses,\n    };\n    gls_query.wifiAccessPoints.forEach(ap => {\n        delete ap.type;\n        delete ap.channel;\n    });\n    \n    \n    return {\n        \"type\": \"Wi-Fi_Legacy\",\n        \"addresses\": addresses,\n        \"raw\": bytes,\n        \"gls_query\": gls_query,\n        \"mgs_query\": mgs_query,\n    };\n}\n\nfunction parse_wifi(devEui, bytes) {\n    const mgs_query = {\n        \"deveui\":devEui.match( /.{1,2}/g ).join( '-' ),\n        \"uplink\":{\n            \"msgtype\":\"wifi\",\n            \"payload\": `01${bytes.slice(10)}`,\n        }\n    };\n\n    const version = parseInt(bytes.slice(0, 2), 16);\n    const timestamp = parseInt(bytes.slice(2, 10), 16);\n    \n    bytes = Buffer.from(bytes + 10, \"hex\");\n    var addresses = [];\n    for (var i = 5; i < bytes.length; i += 7) {\n        var rssi_raw = bytes[i + 0];\n        var bssid_slice = bytes.slice(i + 1, i + 7);\n        var bssid = [];\n        bssid_slice.forEach(byte => {\n            bssid.push(pad(byte));\n        });\n        addresses.push({\n            \"macAddress\": bssid.join(\":\"),\n            \"signalStrength\":  (rssi_raw > 127) ? rssi_raw - 256 : rssi_raw,\n        });\n    }\n    \n    const lorawan = [{\n        \"gatewayId\": \"fake\",\n        \"antennaId\": 0,\n        \"rssi\": 0,\n        \"snr\":0,\n        \"antennaLocation\": {\n            \"latitude\": 0.0,\n            \"longitude\": 0.0,\n            \"altitude\": 0.0\n        }\n    }];\n    \n    var gls_query = {\n       \"lorawan\": lorawan,\n       \"wifiAccessPoints\": addresses,\n    };\n    gls_query.wifiAccessPoints.forEach(ap => {\n        delete ap.type;\n        delete ap.channel;\n    });\n    \n    return {\n        \"type\": \"Wi-Fi\",\n        \"addresses\": addresses,\n        \"timestamp\": timestamp,\n        \"version\": version,\n        \"raw\": bytes,\n        \"gls_query\": gls_query,\n        \"mgs_query\": mgs_query,\n    };\n}\n\nfunction parse_gnss(antenna, devEui, data) {\n    const bit_mask_has_location = 1;\n    const has_assisted_location = (parseInt(data.slice(6, 8), 16) & bit_mask_has_location) !== 0;\n    var mgs_query = {\n        \"deveui\":devEui.match( /.{1,2}/g ).join( \"-\" ),\n        \"uplink\":{\n            \"msgtype\":\"gnss\",\n            \"payload\": data,\n        }\n    };\n    if (has_assisted_location === false){\n       mgs_query.uplink.gnss_assist_position = global.get(\"device_assistance_coordinates\")\n    }\n    \n    return {\n        \"type\": `GNSS - ${antenna} antenna`,\n        \"data\": data,\n        \"mgs_query\": mgs_query,\n    };\n}\n\nfunction parse_signed_2_bytes_int(value) {\n    var value_int =  parseInt(value, 16);\n    if ((value_int & 0x8000) > 0) {\n        value_int = value_int - 0x10000;\n    }\n    return value_int;\n}\n\nfunction parse_acc(data) {\n    const move_history = parseInt(data.slice(0, 2), 16);\n    const acc = {\n        'x': parse_signed_2_bytes_int(data.slice(2, 6), 16),\n        'y': parse_signed_2_bytes_int(data.slice(6, 10), 16),\n        'z': parse_signed_2_bytes_int(data.slice(10, 14), 16),\n    };\n    const temperature =  parse_signed_2_bytes_int(data.slice(14, 18), 16)/100;\n    \n    return {\n        \"type\": \"acc\",\n        \"move_history\": move_history,\n        \"acc_mg\": acc,\n        \"temperature_C\": temperature\n    };\n}\n\nfunction parse_charge(data) {\n    return {\n        \"type\": \"charge\",\n        \"charge_mAh\":  parseInt(data, 16),\n    };\n}\n\nfunction parse_voltage(data) {\n    return {\n        \"type\": \"voltage\",\n        \"voltage_V\":  parseInt(data, 16)/1000,\n    };\n}\n\nfunction parse_counter(data) {\n    \n    const host_reset = parseInt(data.slice(0, 4), 16);\n    const modem_reset = parseInt(data.slice(4, 8), 16);\n    \n    return {\n        \"type\": \"counter\",\n        \"host_reset\": host_reset,\n        \"modem_reset\": modem_reset,\n    };\n}\n\nfunction parse_sensors_full(data) {\n    const version = parseInt(data.slice(0, 1), 16);\n    const move_history = parseInt(data.slice(1, 2), 16);\n    const temperature =  parse_signed_2_bytes_int(data.slice(2, 6), 16)/100;\n    const acc_charge =  parse_signed_2_bytes_int(data.slice(6, 10), 16);\n    const voltage =  parse_signed_2_bytes_int(data.slice(10, 14), 16);\n    \n    return {\n        \"type\": \"sensor_full\",\n\t\t\"version\": version,\n        \"move_history\": move_history,\n        \"temperature_C\": temperature,\n        \"accumulated_charge\": acc_charge,\n        \"voltage\": voltage\n    };\n}\n\nfunction parse_sensors_basic(data) {\n    const version = parseInt(data.slice(0, 1), 16);\n    const move_history = parseInt(data.slice(1, 2), 16);\n    \n    return {\n        \"type\": \"sensor_basic\",\n        \"version\": version,\n        \"move_history\": move_history,\n    };\n}\n\nfunction create_message(payload, uplink, topic) {\n    return {\n        \"payload\": payload,\n        \"uplink\": uplink,\n        \"topic\": topic,\n    };\n}\n\nmsg.payload.forEach( stream_array => {\n    var index = 0;\n    var stream = stream_array[1];\n    \n    while(index < stream.length) {\n        var tag = parseInt(stream.slice(index, index + 2), 16);\n        index += 2;\n        var length = parseInt(stream.slice(index, index + 2), 16);\n        index += 2;\n        var value = stream.slice(index, index + length*2);\n        index += length * 2;\n        \n        \n        switch (tag) {\n            case 5:         // GNSS - No specific antenna\n                node.send(\n                    create_message(\n                        parse_gnss(\"\", msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 6:\n                node.send(\n                    create_message(\n                        parse_gnss(\"PCB\", msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 7:\n                node.send(\n                    create_message(\n                        parse_gnss(\"Patch\", msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 8:\n                node.send(\n                    create_message(\n                        parse_wifi_legacy(msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 9:\n                node.send(\n                    create_message(\n                        parse_acc(value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 0x0A:\n                node.send(\n                    create_message(\n                        parse_charge(value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 0x0B:\n                node.send(\n                    create_message(\n                        parse_voltage(value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 0x0C:\n                node.send(\n                    create_message(\n                        parse_counter(value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 0x0D:\n                if (length == 7){\n                    message_data = parse_sensors_full(value)\n                }else if (length == 1){\n                    message_data = parse_sensors_basic(value)\n                }\n                else{\n                    break;\n                }\n                \n                node.send(\n                    create_message(\n                        message_data,\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n            case 0x0E:\n                node.send(\n                    create_message(\n                        parse_wifi(msg.uplink.devEui, value),\n                        msg.uplink,\n                        msg.topic\n                    )\n                );\n                break;\n                \n            default:\n                continue;\n        }\n    }\n    \n});\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 260,
        "wires": [
            [
                "2be3627.69d911e"
            ]
        ]
    },
    {
        "id": "52d0aeea.fa092",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Prepare Wi-Fi request",
        "func": "const api = \"api/v1/device/send\";\n\nmsg.url = `${global.get('mgs_url')}/${api}`;\nmsg.method = \"POST\";\nmsg.headers = {\n    'Authorization': global.get('mgs_token'),\n    'Content-Type': 'application/json',\n};\n\nmsg.data = msg.payload;\nmsg.payload = msg.payload.mgs_query;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 441,
        "y": 480,
        "wires": [
            [
                "58c60eb9.e0af08"
            ]
        ]
    },
    {
        "id": "58c60eb9.e0af08",
        "type": "http request",
        "z": "83bd14ee.433d18",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 651,
        "y": 480,
        "wires": [
            [
                "5e75d5f9.cecc04",
                "b521aa9e.fdd3b"
            ]
        ]
    },
    {
        "id": "5e75d5f9.cecc04",
        "type": "json",
        "z": "83bd14ee.433d18",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 791,
        "y": 480,
        "wires": [
            [
                "c97f47c5.b245e8"
            ]
        ]
    },
    {
        "id": "fab45837.82ba8",
        "type": "link in",
        "z": "83bd14ee.433d18",
        "name": "To prepare Wi-Fi request",
        "links": [
            "b23f04cb.64039",
            "9f223b0e.dba11"
        ],
        "x": 296,
        "y": 480,
        "wires": [
            [
                "52d0aeea.fa092"
            ]
        ]
    },
    {
        "id": "f335cc1b.2e1a2",
        "type": "link in",
        "z": "83bd14ee.433d18",
        "name": "To worldmap",
        "links": [
            "c773054.b46e378",
            "e9090994.7e4388",
            "3badfd86.2e113a"
        ],
        "x": 1195,
        "y": 1020,
        "wires": [
            [
                "ff12cbd8.37aa38"
            ]
        ]
    },
    {
        "id": "1ca8864b.ad01fa",
        "type": "link in",
        "z": "83bd14ee.433d18",
        "name": "To prepare GNSS request",
        "links": [
            "a36a444f.fd0098",
            "87657f27.fe93c"
        ],
        "x": 295,
        "y": 660,
        "wires": [
            [
                "35136ef1.faf7d2"
            ]
        ]
    },
    {
        "id": "35136ef1.faf7d2",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Prepare GNSS request",
        "func": "const api = \"api/v1/device/send\";\n\nmsg.url = `${global.get('mgs_url')}/${api}`;\nmsg.method = \"POST\";\nmsg.headers = {\n    'Authorization': global.get('mgs_token'),\n    'Content-Type': 'application/json',\n};\n\nmsg.data = msg.payload;\nmsg.payload = msg.payload.mgs_query;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 660,
        "wires": [
            [
                "c48f5a9b.707018"
            ]
        ]
    },
    {
        "id": "c48f5a9b.707018",
        "type": "http request",
        "z": "83bd14ee.433d18",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 620,
        "wires": [
            [
                "24fb0547.5c5982"
            ]
        ]
    },
    {
        "id": "24fb0547.5c5982",
        "type": "json",
        "z": "83bd14ee.433d18",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "3a1e2c31.da802c",
                "c97f47c5.b245e8"
            ]
        ]
    },
    {
        "id": "cfc61d61.46b9a",
        "type": "comment",
        "z": "83bd14ee.433d18",
        "name": "License",
        "info": "The Clear BSD License\nCopyright Semtech Corporation 2020. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted (subject to the limitations in the disclaimer\nbelow) provided that the following conditions are met:\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n * Neither the name of the Semtech corporation nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nNO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY\nTHIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\nNOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n",
        "x": 1130,
        "y": 60,
        "wires": []
    },
    {
        "id": "6e80c692.8668b8",
        "type": "inject",
        "z": "83bd14ee.433d18",
        "name": "Assistance coordinates for GNSS autonomous scans",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "[0,0]",
        "payloadType": "json",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "da781cae.14d768"
            ]
        ]
    },
    {
        "id": "da781cae.14d768",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Assistance coordinates",
        "func": "global.set('device_assistance_coordinates', msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b521aa9e.fdd3b",
        "type": "link out",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [],
        "x": 1355,
        "y": 480,
        "wires": []
    },
    {
        "id": "3a1e2c31.da802c",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Force port to downlink GNSS assistance position",
        "func": "// This block exists because the Modem & Geolocation Services is returning value 0\n// for the dnlink.port field.\n// This is the trigger that this downlink has to be transported on application level\n\nfor (const eui in msg.payload.result){\n    if ((msg.payload.result.dnlink !== null) && (msg.payload.result.dnlink.port === 0)){\n        msg.payload.result.dnlink.port = global.get('port_gnss_push_solver_message_port');\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 660,
        "wires": [
            [
                "8c00c3ac.a79688"
            ]
        ]
    },
    {
        "id": "8c00c3ac.a79688",
        "type": "json",
        "z": "83bd14ee.433d18",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1210,
        "y": 660,
        "wires": [
            [
                "b521aa9e.fdd3b"
            ]
        ]
    },
    {
        "id": "38881cda.d4ef24",
        "type": "inject",
        "z": "83bd14ee.433d18",
        "name": "Port GNSS push solver message port",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "150",
        "payloadType": "json",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "7714b4fb.78c9bc"
            ]
        ]
    },
    {
        "id": "7714b4fb.78c9bc",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Push GNSS solver message port",
        "func": "global.set('port_gnss_push_solver_message_port', msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 880,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a2185a47.49ad68",
        "type": "comment",
        "z": "83bd14ee.433d18",
        "name": "Link it to Modem & Geolocation Services parser input",
        "info": "",
        "x": 1310,
        "y": 440,
        "wires": []
    },
    {
        "id": "c7782175.3c6408",
        "type": "comment",
        "z": "83bd14ee.433d18",
        "name": "Link it from stream of Modem & Geolocation Services parser",
        "info": "",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "eaa19d93.ce7d18",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Create worldmap object",
        "func": "/*\nmsg.payload = {\"result\":{\n  \"llh\":              [45.2, 5.7, 200],\n},\"warnings\":[],\"errors\":[\"GNSS solver error [1]: Not enough viewable satellites\"]}\n*/\n\nif (msg.payload.result === null) return;\n\nvar counters = context.get(\"counters\") || {};\n\nconst device_name = msg.topic.split('/')[2];\nconst devEui = msg.uplink.devEui.match( /.{1,2}/g ).join( '-' );\nconst location_result = msg.location_result;\nconst nav_messages = msg.fifo;\nconst type = msg.data.type;\nvar counters_for_deveui = counters[devEui] || {};\nvar counter = counters_for_deveui[type] || 0;\n\nmsg.payload = {\n    \"name\": `${devEui} (${msg.data.type}) ${counter}`,\n    \"lat\": location_result[0],\n    \"lon\": location_result[1]\n}\ncounters_for_deveui[type] = counter + 1;\ncounters[devEui] = counters_for_deveui;\ncontext.set(\"counters\", counters);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "aedcbfa0.9ea288"
            ]
        ]
    },
    {
        "id": "aedcbfa0.9ea288",
        "type": "switch",
        "z": "83bd14ee.433d18",
        "name": "Switch Type",
        "property": "data.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Wi-Fi",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Wi-Fi_Legacy",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "GNSS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 710,
        "y": 1000,
        "wires": [
            [
                "3badfd86.2e113a"
            ],
            [
                "3badfd86.2e113a"
            ],
            [
                "3badfd86.2e113a"
            ],
            [
                "688b6087.012e8"
            ]
        ]
    },
    {
        "id": "688b6087.012e8",
        "type": "debug",
        "z": "83bd14ee.433d18",
        "name": "Unknown data type",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1040,
        "wires": []
    },
    {
        "id": "c97f47c5.b245e8",
        "type": "function",
        "z": "83bd14ee.433d18",
        "name": "Extract location result Wi-Fi & GNSS",
        "func": "try{\n    msg.location_result = msg.payload.result.position_solution.llh\n    return [msg, null];\n} catch(err) {\n    msg.payload = msg.payload.result.log_messages;\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 890,
        "y": 580,
        "wires": [
            [
                "f83991f9.37ab8"
            ],
            [
                "85cd5e9f.b91d18"
            ]
        ]
    },
    {
        "id": "3badfd86.2e113a",
        "type": "link out",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [
            "f335cc1b.2e1a2"
        ],
        "x": 835,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d0e088e5.7b11c8",
        "type": "debug",
        "z": "83bd14ee.433d18",
        "name": "Prepare map error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c91041a2.ad9b18",
        "type": "link in",
        "z": "83bd14ee.433d18",
        "name": "To prepare GNSS request",
        "links": [
            "85cd5e9f.b91d18",
            "f089ef89.3f25b8"
        ],
        "x": 1195,
        "y": 1080,
        "wires": [
            [
                "d0e088e5.7b11c8"
            ]
        ]
    },
    {
        "id": "85cd5e9f.b91d18",
        "type": "link out",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [
            "c91041a2.ad9b18"
        ],
        "x": 1075,
        "y": 600,
        "wires": []
    },
    {
        "id": "10106990.51a566",
        "type": "link in",
        "z": "83bd14ee.433d18",
        "name": "To worldmap",
        "links": [
            "c5e3b03d.b79e5",
            "1bd9f271.c3bebe",
            "3a9a05b8.73b6ea",
            "f83991f9.37ab8"
        ],
        "x": 335,
        "y": 1000,
        "wires": [
            [
                "eaa19d93.ce7d18"
            ]
        ]
    },
    {
        "id": "f83991f9.37ab8",
        "type": "link out",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [
            "10106990.51a566"
        ],
        "x": 1075,
        "y": 560,
        "wires": []
    },
    {
        "id": "ff12cbd8.37aa38",
        "type": "worldmap",
        "z": "83bd14ee.433d18",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMC",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "true",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS,SW",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1300,
        "y": 1020,
        "wires": []
    },
    {
        "id": "2be3627.69d911e",
        "type": "switch",
        "z": "83bd14ee.433d18",
        "name": "Geolocation type switch",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Wi-Fi",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "GNSS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 910,
        "y": 260,
        "wires": [
            [
                "9f223b0e.dba11"
            ],
            [
                "87657f27.fe93c"
            ],
            [
                "50364a6d.1dea5c"
            ]
        ],
        "outputLabels": [
            "Wi-Fi",
            "GNSS",
            "Tracker"
        ],
        "info": "Route data regarding their content:\n* Wi-Fi\n* GNSS\n* Tracker data (accelerometer/battery)"
    },
    {
        "id": "9f223b0e.dba11",
        "type": "link out",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [
            "fab45837.82ba8"
        ],
        "x": 1075,
        "y": 200,
        "wires": []
    },
    {
        "id": "87657f27.fe93c",
        "type": "link out",
        "z": "83bd14ee.433d18",
        "name": "",
        "links": [
            "1ca8864b.ad01fa"
        ],
        "x": 1075,
        "y": 280,
        "wires": []
    },
    {
        "id": "50364a6d.1dea5c",
        "type": "debug",
        "z": "83bd14ee.433d18",
        "name": "LR1110 Tracker environmental data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1210,
        "y": 320,
        "wires": []
    }
]
